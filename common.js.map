{"version":3,"sources":["webpack:///./src/app/authentication/services/auth.service.ts","webpack:///./src/app/authentication/services/user.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAA2C;AACL;AACH;AACL;AAE9B,IAAM,KAAK,GAAG;IACZ,IAAI,0CAAI,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC;IACtC,IAAI,0CAAI,CAAC,CAAC,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,CAAC;IACtC,IAAI,0CAAI,CAAC,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC;IACpC,IAAI,0CAAI,CAAC,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC;CACnC,CAAC;AACF,IAAI,eAAe,GAAG,+CAAE,CAAC,KAAK,CAAC,CAAC;AAKhC;IAHA;QAIY,gBAAW,GAAW,SAAS,CAAC;QACnC,aAAQ,GAAW,cAAc,CAAC;QAClC,eAAU,GAAY,KAAK,CAAC;IAqCrC,CAAC;IAnCA,iCAAW,GAAX;QACI,OAAO,eAAe,CAAC;IAC3B,CAAC;IACD,yCAAmB,GAAnB,UAAoB,QAAgB,EAAE,QAAe;QAArD,iBAaI;QAZG,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CACnC,0DAAG,CAAC,eAAK;YACR,IAAI,IAAI,GAAI,KAAK,CAAC,IAAI,CAAC,cAAI,IAAI,QAAC,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAAC,EAA5D,CAA4D,CAAC,CAAC;YACjF,IAAG,IAAI,EAAE;gBACpB,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;aACzB;iBAAM;gBACN,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC;aACxB;YACD,OAAO,KAAI,CAAC,UAAU,CAAC;QACxB,CAAC,CAAC,CACF;IACC,CAAC;IACJ,oCAAc,GAAd;QACC,OAAO,IAAI,CAAC,UAAU,CAAC;IACxB,CAAC;IACD,oCAAc,GAAd;QACC,OAAO,IAAI,CAAC,WAAW,CAAC;IACzB,CAAC;IACD,oCAAc,GAAd,UAAe,GAAW;QACzB,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;IACxB,CAAC;IACD,iCAAW,GAAX;QACC,OAAO,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IACD,qCAAe,GAAf;QACC,OAAO,IAAI,CAAC,YAAY,CAAC;IAC1B,CAAC;IACD,gCAAU,GAAV;QACC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IACzB,CAAC;IAvCW,WAAW;QAHvB,gEAAU,CAAC;YACX,UAAU,EAAC,MAAM;SACjB,CAAC;OACW,WAAW,CAwCvB;IAAD,kBAAC;CAAA;AAxCuB;;;;;;;;;;;;;AChBxB;AAAA;AAAA;IACC,cAAmB,MAAa,EAAS,QAAe,EAAS,QAAe,EAAS,IAAW;QAAjF,WAAM,GAAN,MAAM,CAAO;QAAS,aAAQ,GAAR,QAAQ,CAAO;QAAS,aAAQ,GAAR,QAAQ,CAAO;QAAS,SAAI,GAAJ,IAAI,CAAO;IACpG,CAAC;;;;;;;IACF,WAAC;CAAA;AAHgB","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport {map} from 'rxjs/operators';\r\nimport { User } from './user';\r\n\r\nconst USERS = [\r\n  new User(1, 'mahesh', 'm123', 'ADMIN'),\r\n  new User(2, 'krishna', 'k123', 'USER'),\r\n  new User(3, 'admin', '123', 'ADMIN'),\r\n  new User(4, 'user', '123', 'USER')\r\n];\r\nlet usersObservable = of(USERS);\r\n\r\n@Injectable({\r\n\tprovidedIn:'root'\r\n})\r\nexport class AuthService { \r\n    private redirectUrl: string = '/login1';\r\n\tprivate loginUrl: string = '/login-basic';\r\n\tprivate isloggedIn: boolean = false;\r\n\tprivate loggedInUser: User;\r\n\tgetAllUsers(): Observable<User[]> {\r\n\t    return usersObservable;\r\n\t}\r\n\tisUserAuthenticated(username: string, password:string): Observable<boolean> {\r\n        return this.getAllUsers().pipe(\r\n\t\t\tmap(users => {\r\n\t\t\t\tlet user = \tusers.find(user => (user.username === username) && (user.password === password));\r\n                if(user) {\r\n\t\t\t\t\tthis.isloggedIn = true;\r\n\t\t\t\t\tthis.loggedInUser = user;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.isloggedIn = false;\r\n\t\t\t\t}\r\n\t\t\t\treturn this.isloggedIn; \t\r\n\t\t\t})\r\n\t\t)\r\n    }\t\r\n\tisUserLoggedIn(): boolean {\r\n\t\treturn this.isloggedIn;\r\n\t}\r\n\tgetRedirectUrl(): string {\r\n\t\treturn this.redirectUrl;\r\n\t}\r\n\tsetRedirectUrl(url: string): void {\r\n\t\tthis.redirectUrl = url;\r\n\t}\r\n\tgetLoginUrl(): string {\r\n\t\treturn this.loginUrl;\r\n\t}\r\n\tgetLoggedInUser(): User {\r\n\t\treturn this.loggedInUser;\r\n\t}\r\n\tlogoutUser(): void{\r\n\t\tthis.isloggedIn = false;\r\n\t}\r\n}","export class User { \r\n\tconstructor(public userId:number, public username:string, public password:string, public role:string) {\r\n\t}\r\n}\r\n    "],"sourceRoot":""}